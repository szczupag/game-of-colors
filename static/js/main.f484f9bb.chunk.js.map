{"version":3,"sources":["components/GameSetupRow/GameSetupRow.module.css","components/Controls/Controls.module.css","components/GameOverModal/GameOverModal.module.css","components/GameSetup/GameSetup.module.css","components/App/App.module.css","components/TilesArray/TilesArray.module.css","components/Button/Button.module.css","components/Tile/Tile.module.css","components/GameSetupRow/index.js","slices/gameSetupSlice.js","components/Button/index.js","components/GameSetup/index.js","helpers/hasNeighbour.js","helpers/checkGameStatus.js","helpers/updateBoardColors.js","helpers/createVisitedArray.js","helpers/processBoard.js","slices/gameBoardSlice.js","hooks/useGameBoard.js","helpers/rainbow.js","helpers/initGameBoard.js","components/Tile/index.js","components/TilesArray/index.js","components/Controls/index.js","components/GameOverModal/index.js","components/GameBoard/index.js","components/App/index.js","app/store.js","index.js"],"names":["module","exports","SetupRow","label","value","onDecrement","onIncrement","className","s","root","controls","button","onClick","initialState","rows","columns","colors","isStarted","gameSetupSlice","createSlice","name","reducers","incrementRows","state","decrementRows","incrementColumns","decrementColumns","incrementColors","decrementColors","startGame","resetSetup","actions","rowsCount","gameSetup","columnsCount","colorsCount","Button","GameSetup","useSelector","dispatch","useDispatch","innerWrapper","hasNeighbour","array","row","col","current","length","checkGameStatus","some","rowId","tile","colId","updateBoardColors","gameState","currentTile","updatedColorsArray","targetColor","tilesInRow","currentRow","targetRow","Math","floor","random","createArrayWithFalseValues","cols","Array","from","checkTile","visitedArray","score","maxRow","maxCol","visitAllNeighbours","processBoard","createVisitedArray","map","arr","slice","gameOver","gameBoardSlice","updateScore","action","payload","setGameOver","resetGame","gameBoard","useGameBoard","setArray","updateUserScore","setGameOverStatus","useEffect","onTileClick","getScore","rainbowElement","h","r","g","b","f","n","k","max","min","x","round","toString","padStart","join","rainbow","stops","initGameBoard","tilesArray","colorsArray","keys","number","Tile","color","style","backgroundColor","TilesArray","wrapper","key","Controls","onButtonClick","gameControls","scoreWrapper","GameOverModal","visible","modalWrapper","text","GameBoard","userScore","gameOverStatus","useState","setColorsArray","backButtonClickHandler","sc","App","started","title","configureStore","reducer","gameSetupReducer","gameBoardReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f484f9bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GameSetupRow_root__1qVjn\",\"controls\":\"GameSetupRow_controls__1Z3pZ\",\"value\":\"GameSetupRow_value__2fP8k\",\"button\":\"GameSetupRow_button__3vu9Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameControls\":\"Controls_gameControls__1NYQo\",\"scoreWrapper\":\"Controls_scoreWrapper__2sh_p\",\"score\":\"Controls_score__1Snv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GameOverModal_root__VILyJ\",\"modalWrapper\":\"GameOverModal_modalWrapper__1aJ8e\",\"text\":\"GameOverModal_text__3IgAV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"GameSetup_root__2qrI7\",\"innerWrapper\":\"GameSetup_innerWrapper__IeGWX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1Jh3p\",\"title\":\"App_title__1YcTA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"TilesArray_row__3-eyP\",\"wrapper\":\"TilesArray_wrapper__1XExh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tile\":\"Tile_tile__3l9S8\"};","import React from 'react';\nimport s from './GameSetupRow.module.css';\n\nconst SetupRow = ({\n  label,\n  value,\n  onDecrement,\n  onIncrement,\n}) => (\n    <div className={s.root}>\n      <span>{label}</span>\n      <div className={s.controls}>\n        <button\n          className={s.button}\n          onClick={onDecrement}\n        >\n          -\n        </button>\n        <span className={s.value}>{value}</span>\n        <button\n          className={s.button}\n          onClick={onIncrement}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n\nexport default SetupRow;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  rows: 5,\n  columns: 12,\n  colors: 5,\n  isStarted: false,\n};\n\nexport const gameSetupSlice = createSlice({\n  name: 'gameSetup',\n  initialState,\n  reducers: {\n    incrementRows: state => {\n      state.rows += 1;\n    },\n    decrementRows: state => {\n      if (state.rows > 1) state.rows -= 1;\n    },\n    incrementColumns: state => {\n      state.columns += 1;\n    },\n    decrementColumns: state => {\n      if (state.columns > 1) state.columns -= 1;\n    },\n    incrementColors: state => {\n      state.colors += 1;\n    },\n    decrementColors: state => {\n      if (state.colors > 1) state.colors -= 1;\n    },\n    startGame: state => {\n      state.isStarted = true;\n    },\n    resetSetup: () => initialState,\n  },\n});\n\nexport const {\n  incrementRows,\n  decrementRows,\n  incrementColumns,\n  decrementColumns,\n  incrementColors,\n  decrementColors,\n  startGame,\n  resetSetup,\n} = gameSetupSlice.actions;\n\nexport const rowsCount = state => state.gameSetup.rows;\nexport const columnsCount = state => state.gameSetup.columns;\nexport const colorsCount = state => state.gameSetup.colors;\nexport const isStarted = state => state.gameSetup.isStarted;\n\nexport default gameSetupSlice.reducer;\n","import React from 'react';\nimport s from './Button.module.css';\n\nconst Button = ({\n  label,\n  onClick\n}) => (\n  <button\n    className={s.button}\n    onClick={onClick}\n  >\n    {label}\n  </button>\n);\n\nexport default Button;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport SetupRow from '../GameSetupRow';\nimport {\n  incrementRows,\n  decrementRows,\n  incrementColumns,\n  decrementColumns,\n  incrementColors,\n  decrementColors,\n  startGame,\n  rowsCount,\n  columnsCount,\n  colorsCount,\n} from '../../slices/gameSetupSlice';\nimport s from './GameSetup.module.css';\nimport Button from '../Button';\n\nconst GameSetup = () => {\n  const rows = useSelector(rowsCount);\n  const columns = useSelector(columnsCount);\n  const colors = useSelector(colorsCount);\n  const dispatch = useDispatch();\n\n  return (\n    <div className={s.root}>\n      <div className={s.innerWrapper}>\n        <SetupRow\n          label=\"Rows\"\n          value={rows}\n          onDecrement={() => dispatch(decrementRows())}\n          onIncrement={() => dispatch(incrementRows())}\n        />\n        <SetupRow\n          label=\"Columns\"\n          value={columns}\n          onDecrement={() => dispatch(decrementColumns())}\n          onIncrement={() => dispatch(incrementColumns())}\n        />\n        <SetupRow\n          label=\"Colors\"\n          value={colors}\n          onDecrement={() => dispatch(decrementColors())}\n          onIncrement={() => dispatch(incrementColors())}\n        />\n        <Button\n          onClick={() => dispatch(startGame())}\n          label=\"Start\"\n        />\n      </div>\n    </div>\n  )\n};\n\nexport default GameSetup;\n","const hasNeighbour = (array, row, col) => {\n  const current = array[row][col];\n  if (row > 0) {\n    if (array[row - 1][col] === current) return true;\n  }\n  if (row < array.length - 1) {\n    if (array[row + 1][col] === current) return true;\n  }\n  if (col > 0) {\n    if (array[row][col - 1] === current) return true;\n  }\n  if (col < array[0].length - 1) {\n    if (array[row][col + 1] === current) return true;\n  }\n  return false;\n};\n\nexport default hasNeighbour;\n","import hasNeighbour from \"./hasNeighbour\";\n\nconst checkGameStatus = (array) => {\n  const res = array.some((row, rowId) => row.some((tile, colId) => hasNeighbour(array, rowId, colId)));\n  return !res;\n};\n\nexport default checkGameStatus;\n","const updateBoardColors = (gameState, currentTile) => {\n  const { array, updatedColorsArray, colors, targetColor } = gameState;\n  const { row, col } = currentTile;\n  if (row === array.length - 1 || array[row + 1][col] !== targetColor) {\n    let tilesInRow = 1;\n    while (row - tilesInRow >= 0 && updatedColorsArray[row - tilesInRow][col] === targetColor) {\n      tilesInRow += 1;\n    }\n    for (let currentRow = row; currentRow >= 0; currentRow--) {\n      const targetRow = currentRow - tilesInRow;\n      if (targetRow >= 0) updatedColorsArray[currentRow][col] = array[targetRow][col];\n      else updatedColorsArray[currentRow][col] = Math.floor(Math.random() * colors);\n    }\n  }\n};\n\nexport default updateBoardColors;\n","const createArrayWithFalseValues = (rows, cols) => {\n  return Array.from({ length: rows }, () => Array.from({ length: cols }, () => false));\n};\n\nexport default createArrayWithFalseValues;\n","import updateBoardColors from './updateBoardColors';\nimport createVisitedArray from './createVisitedArray';\nimport hasNeighbour from './hasNeighbour';\n\nconst visitAllNeighbours = (gameState, currentTile) => {\n  const { array } = gameState;\n  const { row, col } = currentTile;\n  const maxRow = array.length - 1;\n  const maxCol = array[0].length - 1;\n  if (row > 0) gameState.score = checkTile(gameState, { row: row - 1, col });\n  if (row < maxRow) gameState.score = checkTile(gameState, { row: row + 1, col });\n  if (col > 0) gameState.score = checkTile(gameState, { row, col: col - 1 });\n  if (col < maxCol) gameState.score = checkTile(gameState, { row, col: col + 1 });\n  return gameState.score;\n};\n\nconst checkTile = (gameState, currentTile) => {\n  const { array, visitedArray, targetColor } = gameState;\n  const { row, col } = currentTile;\n  if (!visitedArray[row][col]) {\n    visitedArray[row][col] = true;\n    const currentColor = array[row][col];\n    if (currentColor === targetColor) {\n      gameState.score += 1;\n      gameState.score = visitAllNeighbours(gameState, currentTile);\n      updateBoardColors(gameState, currentTile);\n    }\n  }\n  return gameState.score;\n};\n\n\nconst processBoard = (row, col, array, colors) => {\n  if (!hasNeighbour(array, row, col)) {\n    return {\n      score: 0,\n      updatedColorsArray: array,\n    }\n  }\n  const visitedArray = createVisitedArray(array.length, array[0].length);\n  const updatedColorsArray = array.map(arr => arr.slice());\n  const gameState = {\n    array,\n    visitedArray,\n    updatedColorsArray,\n    colors,\n    score: 0,\n    targetColor: array[row][col],\n  };\n  const currentTile = {\n    row,\n    col,\n  };\n\n  const score = checkTile(gameState, currentTile);\n\n  return {\n    score: score > 1 ? score : 0,\n    updatedColorsArray,\n  }\n};\n\nexport default processBoard;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  score: 0,\n  gameOver: false,\n}\n\nexport const gameBoardSlice = createSlice({\n  name: 'gameBoard',\n  initialState,\n  reducers: {\n    updateScore: (state, action) => {\n      state.score += action.payload;\n    },\n    setGameOver: state => {\n      state.gameOver = true;\n    },\n    resetGame: () => initialState,\n  },\n});\n\nexport const {\n  updateScore,\n  setGameOver,\n  resetGame,\n} = gameBoardSlice.actions;\n\nexport const score = state => state.gameBoard.score;\nexport const gameOver = state => state.gameBoard.gameOver;\n\nexport default gameBoardSlice.reducer;\n","import { useEffect, useState } from 'react';\nimport checkGameStatus from '../helpers/checkGameStatus';\nimport getScore from '../helpers/processBoard';\nimport { setGameOver } from '../slices/gameBoardSlice';\n\nconst useGameBoard = ({\n  array,\n  colors,\n  setArray,\n  updateUserScore,\n  setGameOverStatus,\n}) => {\n  useEffect(() => {\n    if (array.length > 0) {\n      const gameEnd = checkGameStatus(array); \n      if (gameEnd) setGameOverStatus();\n    }\n  }, [array]);\n\n  const onTileClick = (row, col) => {\n    const {\n      score,\n      updatedColorsArray,\n    } = getScore(row, col, array, colors);\n    updateUserScore(score);\n    setArray(updatedColorsArray);\n  };\n\n  return {\n    onTileClick,\n  }\n};\n\nexport default useGameBoard;\n","const rainbow = (stops, current) => {\n  const c = current / stops;\n  return rainbowElement(c);\n}\n\nconst rainbowElement = (h) => {\n  const f = (n, k = (n + h * 12) % 12) =>\n    0.5 - 0.5 * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  const rgb2hex = (r, g, b) =>\n    \"#\" +\n    [r, g, b]\n      .map(x =>\n        Math.round(x * 255)\n          .toString(16)\n          .padStart(2, 0)\n      )\n      .join(\"\");\n  return rgb2hex(f(0), f(8), f(4));\n};\n\nexport default rainbow;\n","import rainbow from '../helpers/rainbow';\n\nconst initGameBoard = ({\n  rows,\n  columns,\n  colors,\n}) => {\n  const initRow = () => Array.from({length: columns}, () => Math.floor(Math.random() * colors));\n  \n  const tilesArray = Array.from({ length: rows }, initRow);\n  const colorsArray = Array.from(Array(colors).keys()).map(number => rainbow(colors, number));\n\n  return {\n    tilesArray,\n    colorsArray,\n  }\n};\n\nexport default initGameBoard;\n","import React from 'react';\nimport s from './Tile.module.css';\n\nconst Tile = ({\n  color,\n  onTileClick,\n}) => (\n    <div\n      className={s.tile}\n      onClick={onTileClick}\n      style={{ backgroundColor: color }}\n    >\n    </div>\n  );\n\nexport default Tile;\n","import React from 'react';\nimport Tile from '../Tile';\nimport s from './TilesArray.module.css';\n\nconst TilesArray = ({\n  array = [],\n  colors,\n  onTileClick,\n}) => (\n    <div className={s.wrapper}>\n      {array.map((row, rowId) => (\n        <div\n          key={rowId}\n          className={s.row}\n        >\n          {row.map((tile, colId) => (\n            <Tile\n              key={colId}\n              onTileClick={() => onTileClick(rowId, colId)}\n              color={colors[tile]}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n\nexport default TilesArray;\n","import React from 'react';\nimport Button from '../Button';\nimport s from './Controls.module.css';\n\nconst Controls = ({\n  score,\n  onButtonClick\n}) => (\n    <div className={s.gameControls}>\n      <div className={s.scoreWrapper}>\n        <span>Score:</span>\n        <span className={s.score}>{score}</span>\n      </div>\n      <Button\n        onClick={onButtonClick}\n        label='Back to home'\n      />\n    </div>\n  );\n\nexport default Controls;\n","import React from 'react';\nimport Button from '../Button';\nimport s from './GameOverModal.module.css';\n\nconst GameOverModal = ({\n  visible,\n  onButtonClick,\n}) => {\n  if (visible) return (\n    <div className={s.root}>\n      <div className={s.modalWrapper}>\n        <span className={s.text}>There are no more possible moves!</span>\n        <Button\n          onClick={onButtonClick}\n          label='Back to home'\n        />\n      </div>\n    </div>\n  );\n  return null;\n};\n\nexport default GameOverModal;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport useGameBoard from '../../hooks/useGameBoard';\nimport initGameBoard from '../../helpers/initGameBoard';\nimport TilesArray from '../TilesArray';\nimport Controls from '../Controls';\nimport GameOverModal from '../GameOverModal';\nimport {\n  updateScore,\n  setGameOver,\n  resetGame,\n  score,\n  gameOver,\n} from '../../slices/gameBoardSlice';\nimport {\n  rowsCount,\n  columnsCount,\n  colorsCount,\n  resetSetup,\n} from '../../slices/gameSetupSlice';\n\n\nconst GameBoard = () => {\n  const rows = useSelector(rowsCount);\n  const columns = useSelector(columnsCount);\n  const colors = useSelector(colorsCount);\n  const userScore = useSelector(score);\n  const gameOverStatus = useSelector(gameOver);\n  const dispatch = useDispatch();\n  const [array, setArray] = useState([]);\n  const [colorsArray, setColorsArray] = useState([]);\n\n  const updateUserScore = (sc) => dispatch(updateScore(sc));\n  const setGameOverStatus = () => dispatch(setGameOver());\n\n  const backButtonClickHandler = () => {\n    dispatch(resetSetup());\n    dispatch(resetGame());\n  }\n\n  useEffect(() => {\n    const { tilesArray, colorsArray } = initGameBoard({ rows, columns, colors });\n    setArray(tilesArray);\n    setColorsArray(colorsArray);\n  }, []);\n\n  const {\n    onTileClick,\n  } = useGameBoard({ array, setArray, updateUserScore, setGameOverStatus, colors });\n\n\n  return (\n    <div>\n      <Controls\n        score={userScore}\n        onButtonClick={backButtonClickHandler}\n      />\n      <TilesArray\n        array={array}\n        colors={colorsArray}\n        onTileClick={onTileClick}\n      />\n      <GameOverModal\n        visible={gameOverStatus}\n        onButtonClick={backButtonClickHandler}\n      />\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport GameSetup from '../GameSetup';\r\nimport {\r\n  isStarted,\r\n} from '../../slices/gameSetupSlice';\r\nimport s from './App.module.css';\r\nimport GameBoard from '../GameBoard';\r\n\r\nfunction App() {\r\n  const started = useSelector(isStarted);\r\n  return (\r\n    <div className={s.root}>\r\n      <h1 className={s.title}>Game of colors</h1>\r\n      {!started ? <GameSetup /> : <GameBoard />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport gameSetupReducer from '../slices/gameSetupSlice';\r\nimport gameBoardReducer from '../slices/gameBoardSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    gameSetup: gameSetupReducer,\r\n    gameBoard: gameBoardReducer,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}